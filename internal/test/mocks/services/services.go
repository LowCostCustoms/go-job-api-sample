// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/services.go

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	context "context"
	db "go-scheduler-api/internal/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTransactionManager) Begin(ctx context.Context) (db.Querier, db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(db.Querier)
	ret1, _ := ret[1].(db.Transaction)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Begin indicates an expected call of Begin.
func (mr *MockTransactionManagerMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTransactionManager)(nil).Begin), ctx)
}
